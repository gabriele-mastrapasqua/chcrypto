version: '3.8'

services:
  
  # Kafka with zookeeper
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  
  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

    depends_on:
      - zookeeper

  kafka-ui:
    depends_on:
      - kafka
      - zookeeper
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    

  clickhouse:
    # latest LTS version of ClickHouse since 2024.
    image: clickhouse:lts-focal
    depends_on:
      - kafka
    cap_add:
      - SYS_NICE
    ports:
      - "8123:8123" # HTTP interface
      - "9000:9000" # Native TCP interface
      - "9009:9009" # Interserver communication port
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_config:/etc/clickhouse-server
    # healthcheck to wait for the clickhouse server to be ready
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client -q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""

  # clickhouse migrations service: use the ch client after the server is started, 
  # to create the necessary schemas and tables
  clickhouse_migrations:
    image: clickhouse:lts-focal  # use the same image as above for the server, 1 download with all tools needed
    container_name: clickhouse_migrations
    depends_on:
      clickhouse:
        condition: service_healthy
    volumes:
      - ./clickhouse/init-clickhouse.sh:/docker-entrypoint-initdb.d/init-clickhouse.sh
      - ./clickhouse/schema:/docker-entrypoint-initdb.d/schema
    entrypoint: /docker-entrypoint-initdb.d/init-clickhouse.sh

  # grafana with init script to load clickhouse official plugin  
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - clickhouse
    volumes:
      - ./grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      #- ./grafana/init-grafana.sh:/init-grafana.sh
      - grafana_data:/var/lib/grafana
    #entrypoint: /init-grafana.sh
    ports:
      - "3030:3000"
    environment:
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
  
  # main nodejs api
  api:
    depends_on:
      - clickhouse
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - CLICKHOUSE_HOST=clickhouse


  # ingest nodejs script to fetch live blockchain data
  ingest:
    depends_on:
      - kafka
    build:
      context: ./ingest
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - KAFKA_BROKER=kafka:9092
    
volumes:
  clickhouse_data:
  clickhouse_config:
  grafana_data:
  zookeeper_data:
  kafka_data: